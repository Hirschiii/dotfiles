/* See LICENSE file for copyright and license details. */

#include "./themes/dracula.h"
/* appearance */
static const unsigned int borderpx  = 5;        /* border pixel of windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const unsigned int systraypinning = 0;   /* 0: sloppy systray follows selected monitor, >0: pin systray to monitor X */
static const unsigned int systrayonleft = 0;   	/* 0: systray in the right corner, >0: systray on left of status text */
static const unsigned int systrayspacing = 2;   /* systray spacing */
static const unsigned int gappx     = 0;        /* gap pixel between windows */
static const int systraypinningfailfirst = 1;   /* 1: if pinning fails, display systray on the first monitor, False: display systray on the last monitor*/
static const int showsystray        = 1;     /* 0 means no systray */
static const int showbar            = 1;     /* 0 means no bar */
static const int topbar             = 1;     /* 0 means bottom bar */
static const char *fonts[]          = { 
  "FiraCode Nerd Font:style=Retina,Regular:size=12:autohint=true",
  "Noto Color Emoji:style=Regular:pixelsize=20:antialias=true:autohint=true",
  "Symbols Nerd Font:style=1000-em:antialias=true:autohint=true:pixelsize=20"
};
static const char dmenufont[]       = "FiraCode Nerd Font:style=Retina,Regular:size=12:autohint=true";
static const char *colors[][3]      = {
	/*               fg         bg         border   */
	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
};


typedef struct {
	const char *name;
	const void *cmd;
} Sp;
const char *spcmd1[] = {"st", "-n", "spterm", "-g", "120x34", NULL };
const char *spcmd2[] = {"st", "-n", "spfm", "-g", "144x41", "-e", "ranger", NULL };
// const char *spcmd3[] = {"keepassxc", NULL };
static Sp scratchpads[] = {
	/* name          cmd  */
	{"spterm",      spcmd1},
	{"spranger",    spcmd2},
	// {"keepassxc",   spcmd3},
};

/* tagging */
static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 */
	/* class      instance    title       tags mask     isfloating   monitor */
	{ "Gimp"    , NULL        , NULL , 0        , 1 , -1 } ,
	{ "Firefox" , NULL        , NULL , 1 << 8   , 0 , -1 } ,
	{ NULL      , "spterm"    , NULL , SPTAG(0) , 1 , -1 } ,
	{ NULL      , "spfm"      , NULL , SPTAG(1) , 1 , -1 } ,
	{ NULL      , "keepassxc" , NULL , SPTAG(2) , 0 , -1 } ,
  { NULL      , "myfzf"     , NULL , 0        , 1 , -1 } ,
};

/* layout(s) */
static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
static const int nmaster     = 1;    /* number of clients in master area */
static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
static const int lockfullscreen = 1; /* 1 will force focus on the fullscreen window */

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "[]=",      tile },    /* first entry is default */
	{ "><>",      NULL },    /* no layout function means floating behavior */
	{ "[M]",      monocle },
};

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

#include <X11/XF86keysym.h>

/* Add somewhere in your constants definition section */

// static const char *upvol[]   = { "/usr/bin/pactl", "set-sink-volume", "0", "+5%", "&&", "kill", "-10", "$(pidof", "dwmblocks)",     NULL };
// static const char *downvol[] = { "/usr/bin/pactl", "set-sink-volume", "0", "-5%",  "&&", "kill", "-10", "$(pidof", "dwmblocks)",   NULL };
// static const char *mutevol[] = { "/usr/bin/pactl", "set-sink-mute",   "0", "toggle", "&&", "kill", "-10", "$(pidof", "dwmblocks)", NULL };

// static const char *upvol[]   = { "/usr/bin/pactl", "set-sink-volume", "0", "+5%", "&&", "/home/niklas/.local/bin/sb-killvol",  NULL };
// static const char *downvol[] = { "/usr/bin/pactl", "set-sink-volume", "0", "-5%",  "&&", "/home/niklas/.local/bin/sb-killvol", NULL };
// static const char *mutevol[] = { "/usr/bin/pactl", "set-sink-mute",   "0", "toggle", "&&", "/home/niklas/.local/bin/sb-killvol", NULL };

static const char *lightup[] = { "light", "-A", "10",  NULL };
static const char *lightdown[] = { "light", "-U", "10",  NULL };


#define STATUSBAR "dwmblocks"

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
static const char *termcmd[]  = { "st", NULL };




static Key keys[] = {
	/* modifier                     key        function        argument */
  { 0,                            XF86XK_AudioLowerVolume,  spawn,   SHCMD("/usr/bin/pactl set-sink-volume 0 -5% && kill -44 $(pidof dwmblocks)") },
	{ 0,                            XF86XK_AudioRaiseVolume,  spawn,   SHCMD("/usr/bin/pactl set-sink-volume 0 +5% && kill -44 $(pidof dwmblocks)")},
	{ 0,                            XF86XK_AudioMute,         spawn,   SHCMD("/usr/bin/pactl set-sink-mute 0 toggle") },
	{ 0,                            XF86XK_MonBrightnessUp, spawn,    {.v = lightup   } },
	{ 0,                            XF86XK_MonBrightnessDown, spawn,  {.v = lightdown   } },

	{ MODKEY|ShiftMask,             XK_c,       spawn,          SHCMD("/home/niklas/.local/bin/configmenu /home/niklas/.myconfigs")},

	{ MODKEY,                       XK_n,       spawn,          SHCMD("st -n myfzf -g 144x41 -e /home/niklas/.local/bin/fzf-important-files")},

	{ MODKEY,                       XK_b,       spawn,          SHCMD("/opt/Bitwarden/bitwarden %U")},
	{ MODKEY|ShiftMask,             XK_b,       togglebar,      {0} },

	{ MODKEY, 			XK_w, 	    spawn,	    SHCMD("qutebrowser")},

	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
	{ MODKEY,                       XK_Return, spawn,          {.v = termcmd } },
	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
	{ MODKEY|ShiftMask,             XK_Return, zoom,           {0} },
	{ MODKEY,                       XK_Tab,    view,           {0} },
	{ MODKEY,                       XK_q,      killclient,     {0} },
	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
	{ MODKEY,                       XK_space,  setlayout,      {0} },
	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
	// { MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
	// { MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
	{ MODKEY|ShiftMask,            	XK_r,  	   togglescratch, {.ui = 0 } },
	{ MODKEY,            		      	XK_r,	     togglescratch,  {.ui = 1 } },
	// // { MODKEY,            			XK_x,	   togglescratch,  {.ui = 2 } },
	TAGKEYS(                        XK_1,                      0)
	TAGKEYS(                        XK_2,                      1)
	TAGKEYS(                        XK_3,                      2)
	TAGKEYS(                        XK_4,                      3)
	TAGKEYS(                        XK_5,                      4)
	TAGKEYS(                        XK_6,                      5)
	TAGKEYS(                        XK_7,                      6)
	TAGKEYS(                        XK_8,                      7)
	TAGKEYS(                        XK_9,                      8)
	{ MODKEY|ShiftMask,             XK_e,      quit,           {0} },
};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

